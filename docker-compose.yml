version: '3'

services:
  mariadb:
    image: linuxserver/mariadb:10.11.5
    container_name: mariadb
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - PGID=1000 
      - MYSQL_USER=${GITEA_DB_USER} 
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${GITEA_DB_PASSWORD}
      - MYSQL_DATABASE=${GITEA_DB_NAME} 
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    volumes:
      - mariadb-data:/config # Contains the db itself and all assorted settings.
    ports:
      - 3306:3306/tcp 
    networks:
      - symfony
  
  gitea:
    image: gitea/gitea:1.20.3-rootless
    environment:
      - GITEA__database__DB_TYPE=mysql
      - GITEA__database__HOST=mariadb:3306
      - GITEA__database__NAME=${GITEA_DB_NAME}
      - GITEA__database__USER=${GITEA_DB_USER}
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}
    restart: unless-stopped
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    volumes:
      - gitea-data:/var/lib/gitea
      - gitea-config:/etc/gitea
    ports:
      - "3000:3000"
      - "2222:2222"
    depends_on:
      - mariadb
    networks:
      - symfony
  
  frontend:
    build:
      context: .
      dockerfile: Frontend/Dockerfile
      args:
        NAME: ${APP_NAME}
        REPO_NAME: ${APP_REPO_NAME}
        REPO_URL: ${APP_REPO_URL}
        REMOTE_URL: ${APP_REMOTE_URL}
    restart: unless-stopped
    container_name: ${GLOBAL_NAME}-app
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    volumes:
      - app-data:/app
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - gitea
    networks:
      - symfony

  backend:
    build:
      context: .
      dockerfile: Backend/Dockerfile
      args:
        NAME: ${API_NAME}
        REPO_NAME: ${API_REPO_NAME}
        REPO_URL: ${API_REPO_URL}
        REMOTE_URL: ${API_REMOTE_URL}
    restart: unless-stopped
    container_name: ${GLOBAL_NAME}-api
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    volumes:
      - api-data:/api
      - ./Backend/src:/var/www/html
    ports:
      - "9000:9000"
    depends_on:
      - postgres
      - gitea
    networks:
      - symfony
  
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - symfony
  
  nginx:
    image: nginx:latest
    container_name: ${GLOBAL_NAME}-nginx
    restart: unless-stopped
    environment:
      API_REPO_NAME: ${API_REPO_NAME}
      APP_REPO_NAME: ${APP_REPO_NAME}
    ports:
      - "80:80"
      - "443:443"
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    volumes:
      - ./Nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./Nginx/certs:/etc/nginx/certs
      - ./Backend/src:/var/www/html
    networks:
      - symfony
    links:
      - backend

  # elasticsearch:
  #   image: ${GLOBAL_NAME}-elasticsearch
  #   build:
  #     args:
  #       ELK_VERSION: ${ELK_VERSION}
  #     dockerfile: ./Elasticsearch/Dockerfile
  #   container_name: ${GLOBAL_NAME}-elasticsearch
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx1024m -Xms1024m"
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
  #     # Use single node discovery in order to disable production mode and avoid bootstrap checks
  #     # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
  #     discovery.type: single-node
  #   deploy:
  #       resources:
  #           limits:
  #             cpus: '0.60'
  #             memory: 512M
  #           reservations:
  #             cpus: '0.30'
  #             memory: 128M
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   volumes:
  #     - ./Elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
  #     - ./Elasticsearch/var/elasticsearch-data:/usr/share/elasticsearch/data:delegated
  #   networks:
  #     - symfony

  # kibana:
  #   image: ${GLOBAL_NAME}-kibana
  #   platform: linux/x86_64
  #   build:
  #     args:
  #       ELK_VERSION: ${ELK_VERSION}
  #     dockerfile: ./Kibana/Dockerfile
  #   container_name: ${GLOBAL_NAME}-kibana
  #   deploy:
  #       resources:
  #           limits:
  #             cpus: '0.60'
  #             memory: 512M
  #           reservations:
  #             cpus: '0.30'
  #             memory: 128M
  #   ports:
  #     - "5601:5601"
  #   volumes:
  #     - ./Kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - symfony
  
  rabbitmq:
    build:
      context: .
      dockerfile: Backend/Dockerfile
    restart: unless-stopped
    deploy:
        resources:
            limits:
              cpus: '0.60'
              memory: 512M
            reservations:
              cpus: '0.30'
              memory: 128M
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${MQ_USER}
      RABBITMQ_DEFAULT_PASS: ${MQ_PASSWORD}
volumes:
  postgres-data:
  git-repo-data:
  api-data:
  app-data:
  gitea-data:
    driver: local
  gitea-config:
    driver: local
  rabbitmq_data:
  mariadb-data:
    driver: local

networks:
  symfony:
    name: symfony